plugins {
    id 'org.flywaydb.flyway'
    id 'java-library'
    id 'org.jetbrains.kotlin.jvm'
    id 'org.jetbrains.kotlin.plugin.spring'
}

apply from: "${rootDir}/scripts/jacoco.gradle"

java {
    sourceCompatibility = libs.versions.java.get()
    targetCompatibility = libs.versions.java.get()
}

dependencies {
    annotationProcessor "org.springframework:spring-context-indexer:${libs.versions.spring.get()}"

    implementation "ch.qos.logback:logback-core:${libs.versions.logback.get()}"
    implementation "ch.qos.logback:logback-classic:${libs.versions.logback.get()}"
    implementation "org.flywaydb:flyway-core:${libs.versions.flyway.get()}"
    implementation "com.zaxxer:HikariCP:${libs.versions.hikariCP.get()}"
    implementation "org.springframework:spring-context:${libs.versions.spring.get()}"
    implementation "org.springframework:spring-jdbc:${libs.versions.spring.get()}"

    runtimeOnly "org.postgresql:postgresql:${libs.versions.postgresql.get()}"

    testImplementation libs.bundles.test.base
    testImplementation "org.testcontainers:junit-jupiter:${libs.versions.testcontainers.get()}"
    testImplementation "org.testcontainers:postgresql:${libs.versions.testcontainers.get()}"

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${libs.versions.junitJupiter.get()}"
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
    kotlinOptions {
        jvmTarget = libs.versions.java.get()
    }
}

flyway {
    url = System.getenv('JDBC_DATABASE_URL') ?: 'jdbc:postgresql://localhost:5432/gift_certificates'
    user = System.getenv('JDBC_DATABASE_USERNAME') ?: 'postgres'
    password = System.getenv('JDBC_DATABASE_PASSWORD') ?: 'password'

    driver = 'org.postgresql.Driver'
    encoding = 'UTF-8'
    locations = ['classpath:db/migration']
}

test {
    useJUnitPlatform()
}
