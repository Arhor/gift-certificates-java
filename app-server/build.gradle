plugins {
    id 'java-base'
    id 'jacoco'
    id 'org.jetbrains.kotlin.jvm'           apply false
    id 'org.jetbrains.kotlin.plugin.spring' apply false
}

ext {
    jacocoExclusions = [
            'com/epam/esm/gift/**/config/*',
            'com/epam/esm/gift/**/mapper/*',
            'com/epam/esm/gift/**/error/*',
            'com/epam/esm/gift/**/model/*',
            'com/epam/esm/gift/**/dto/*',
    ]
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'org.jetbrains.kotlin.plugin.spring'

    def javaVersion = libs.versions.java.get()

    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion

    dependencies {
        implementation "ch.qos.logback:logback-core:${libs.versions.logback.get()}"
        implementation "ch.qos.logback:logback-classic:${libs.versions.logback.get()}"

        testImplementation libs.bundles.test.base
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${libs.versions.junitJupiter.get()}"
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs.addAll([
                '-Xlint:unchecked',
                '-Xlint:deprecation',
        ])
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
        kotlinOptions {
            jvmTarget = javaVersion
        }
    }

    test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport
    }

    check {
        dependsOn jacocoTestReport, jacocoTestCoverageVerification
    }

    jacoco {
        toolVersion = libs.versions.jacoco.get()
    }

    jacocoTestReport {
        dependsOn test

        reports {
            xml.required.set(false)
            csv.required.set(false)
            html.required.set(true)
        }

        classDirectories.setFrom files(classDirectories.files.collect {
            fileTree(dir: it, exclude: jacocoExclusions)
        })
    }

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                limit {
                    minimum = 0.80
                }
            }
        }

        classDirectories.setFrom files(classDirectories.files.collect {
            fileTree(dir: it, exclude: jacocoExclusions)
        })
    }
}

task jacocoTestReportRoot(type: JacocoReport, group: 'verification') {
    description = 'Generates aggregate report from all subprojects.'

    subprojects.each {
        it.afterEvaluate {
            def subprojectJacocoTestReport = it.tasks.findByName('jacocoTestReport')

            if (subprojectJacocoTestReport != null) {
                dependsOn subprojectJacocoTestReport
            }
        }
    }

    classDirectories.setFrom files([fileTree(
            dir: "${project.projectDir}",
            includes: ['**/build/classes/java/**/*.class'],
            exclude: jacocoExclusions
    )])

    sourceDirectories.setFrom files([fileTree(
            dir: "${project.projectDir}",
            includes: ['**/src/main/java/**/*.*']
    )])

    executionData.setFrom files([fileTree(
            dir: "${project.projectDir}",
            includes: ['**/build/jacoco/*.exec']
    )])

    reports {
        xml.required.set(false)
        csv.required.set(false)
        html.required.set(true)
        html.outputLocation.set(file("${project.projectDir}/build/reports/jacoco/root"))
    }
}
